
export interface Scenario {
  id: string;
  problemTextTemplate: (num1: number, num2: number) => string;
  operation: '+' | '-' | '*' | '/'; // Updated operation types
  data1Label: string; 
  data1Unit: string;  
  data2Label: string; 
  data2Unit: string;  
  resultLabelTemplate: (result: number) => string; 
  icon: string; // Emoji
}

// Helper to generate random numbers within a range for scenarios
const getRandomInt = (min: number, max: number): number => {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min + 1)) + min;
};

export enum ScenarioSetId {
  GENERAL = 'general_problems',
  TECHNOLOGY = 'technology_problems',
  HOUSE = 'house_problems',
  TRANSPORT = 'transport_problems',
  VIDEOGAMES = 'videogame_problems',
  FOOD = 'food_problems',
  MIXED_OPERATIONS_ADVANCED = 'mixed_operations_advanced_problems',
  FIRST_GRADE_ADD_SUB_EASY = 'first_grade_add_sub_easy', // New
  FIRST_GRADE_ADD_SUB_LT100_SIMPLE = 'first_grade_add_sub_lt100_simple', // New
}

// --- SCENARIOS FOR 1ST GRADE: Results < 10 (or simple sums up to 20) ---
const firstGradeEasyAddSubScenarios: Scenario[] = [
  // Sums
  {
    id: 'g1_globos_suma_simple',
    problemTextTemplate: (n1, n2) => `Tienes ${n1} globo${n1 === 1 ? '' : 's'}. Te regalan ${n2} m√°s. ¬øCu√°ntos globos tienes ahora?`,
    operation: '+', data1Label: 'Globos ten√≠as', data1Unit: 'globos', data2Label: 'Te regalan', data2Unit: 'globos',
    resultLabelTemplate: (res) => `Ahora tienes ${res} globo${res === 1 ? '' : 's'}.`, icon: 'üéà',
  },
  {
    id: 'g1_manzanas_junta_simple',
    problemTextTemplate: (n1, n2) => `Juntas ${n1} manzana${n1 === 1 ? '' : 's'} rojas y ${n2} manzana${n2 === 1 ? '' : 's'} verdes. ¬øCu√°ntas manzanas tienes en total?`,
    operation: '+', data1Label: 'Manzanas rojas', data1Unit: 'manzanas', data2Label: 'Manzanas verdes', data2Unit: 'manzanas',
    resultLabelTemplate: (res) => `Tienes ${res} manzana${res === 1 ? '' : 's'} en total.`, icon: 'üçé',
  },
  {
    id: 'g1_lapices_compra_simple',
    problemTextTemplate: (n1, n2) => `Hay ${n1} l√°piz${n1 === 1 ? '' : 'ces'} en la caja. Compras ${n2} m√°s. ¬øCu√°ntos l√°pices hay ahora?`,
    operation: '+', data1Label: 'L√°pices hab√≠a', data1Unit: 'l√°pices', data2Label: 'Compras', data2Unit: 'l√°pices',
    resultLabelTemplate: (res) => `Ahora hay ${res} l√°piz${res === 1 ? '' : 'ces'}.`, icon: '‚úèÔ∏è',
  },
  {
    id: 'g1_autitos_amigo_simple',
    problemTextTemplate: (n1, n2) => `Tienes ${n1} autito${n1 === 1 ? '' : 's'}. Tu amigo te da ${n2}. ¬øCu√°ntos autitos tienes en total?`,
    operation: '+', data1Label: 'Autitos ten√≠as', data1Unit: 'autitos', data2Label: 'Te da', data2Unit: 'autitos',
    resultLabelTemplate: (res) => `Tienes ${res} autito${res === 1 ? '' : 's'} en total.`, icon: 'üöó',
  },
  {
    id: 'g1_flores_recoge_simple',
    problemTextTemplate: (n1, n2) => `Recoges ${n1} flor${n1 === 1 ? '' : 'es'} amarillas y ${n2} flor${n2 === 1 ? '' : 'es'} rojas. ¬øCu√°ntas flores recogiste?`,
    operation: '+', data1Label: 'Flores amarillas', data1Unit: 'flores', data2Label: 'Flores rojas', data2Unit: 'flores',
    resultLabelTemplate: (res) => `Recogiste ${res} flor${res === 1 ? '' : 'es'}.`, icon: 'üå∏',
  },
   {
    id: 'g1_peces_agrega_simple',
    problemTextTemplate: (n1, n2) => `En la pecera hay ${n1} ${n1 === 1 ? 'pez' : 'peces'}. Agregan ${n2} m√°s. ¬øCu√°ntos peces hay ahora?`,
    operation: '+', data1Label: 'Peces hab√≠a', data1Unit: 'peces', data2Label: 'Agregan', data2Unit: 'peces',
    resultLabelTemplate: (res) => `Ahora hay ${res} ${res === 1 ? 'pez' : 'peces'}.`, icon: 'üê†',
  },
  {
    id: 'g1_libros_estante_simple',
    problemTextTemplate: (n1, n2) => `Hay ${n1} ${n1 === 1 ? 'libro' : 'libros'} en un estante. Pones ${n2} m√°s. ¬øCu√°ntos libros hay ahora?`,
    operation: '+', data1Label: 'Libros hab√≠a', data1Unit: 'libros', data2Label: 'Pones', data2Unit: 'libros',
    resultLabelTemplate: (res) => `Ahora hay ${res} ${res === 1 ? 'libro' : 'libros'}.`, icon: 'üìö',
  },
  {
    id: 'g1_patos_laguna_simple',
    problemTextTemplate: (n1, n2) => `Nadan ${n1} ${n1 === 1 ? 'pato' : 'patos'} en la laguna. Llegan ${n2} m√°s. ¬øCu√°ntos patos nadan ahora?`,
    operation: '+', data1Label: 'Patos nadando', data1Unit: 'patos', data2Label: 'Llegan', data2Unit: 'patos',
    resultLabelTemplate: (res) => `Ahora nadan ${res} ${res === 1 ? 'pato' : 'patos'}.`, icon: 'ü¶Ü',
  },
  {
    id: 'g1_soles_dibuja_simple',
    problemTextTemplate: (n1, n2) => `Dibujas ${n1} ${n1 === 1 ? 'sol' : 'soles'} peque√±os. Luego dibujas ${n2} m√°s. ¬øCu√°ntos soles dibujaste?`,
    operation: '+', data1Label: 'Soles dibujados', data1Unit: 'soles', data2Label: 'Dibuja m√°s', data2Unit: 'soles',
    resultLabelTemplate: (res) => `Dibujaste ${res} ${res === 1 ? 'sol' : 'soles'}.`, icon: '‚òÄÔ∏è',
  },
   {
    id: 'g1_nubes_cielo_simple',
    problemTextTemplate: (n1, n2) => `Ves ${n1} ${n1 === 1 ? 'nube' : 'nubes'} en el cielo. Aparecen ${n2} m√°s. ¬øCu√°ntas nubes ves ahora?`,
    operation: '+', data1Label: 'Nubes ve√≠as', data1Unit: 'nubes', data2Label: 'Aparecen', data2Unit: 'nubes',
    resultLabelTemplate: (res) => `Ahora ves ${res} ${res === 1 ? 'nube' : 'nubes'}.`, icon: '‚òÅÔ∏è',
  },
  // Restas
  {
    id: 'g1_galletas_come_simple',
    problemTextTemplate: (n1, n2) => `Tienes ${n1} galleta${n1 === 1 ? '' : 's'}. Te comes ${n2}. ¬øCu√°ntas galletas te quedan?`,
    operation: '-', data1Label: 'Galletas ten√≠as', data1Unit: 'galletas', data2Label: 'Te comes', data2Unit: 'galletas',
    resultLabelTemplate: (res) => `Te quedan ${res} galleta${res === 1 ? '' : 's'}.`, icon: 'üç™',
  },
  {
    id: 'g1_pelotas_pierde_simple',
    problemTextTemplate: (n1, n2) => `Juegas con ${n1} pelota${n1 === 1 ? '' : 's'}. Pierdes ${n2}. ¬øCu√°ntas pelotas te quedan?`,
    operation: '-', data1Label: 'Pelotas ten√≠as', data1Unit: 'pelotas', data2Label: 'Pierdes', data2Unit: 'pelotas',
    resultLabelTemplate: (res) => `Te quedan ${res} pelota${res === 1 ? '' : 's'}.`, icon: '‚öΩ',
  },
  {
    id: 'g1_juguetes_presta_simple',
    problemTextTemplate: (n1, n2) => `Ten√≠as ${n1} juguete${n1 === 1 ? '' : 's'}. Prestaste ${n2}. ¬øCu√°ntos juguetes tienes ahora?`,
    operation: '-', data1Label: 'Juguetes ten√≠as', data1Unit: 'juguetes', data2Label: 'Prestaste', data2Unit: 'juguetes',
    resultLabelTemplate: (res) => `Ahora tienes ${res} juguete${res === 1 ? '' : 's'}.`, icon: 'üß∏',
  },
  {
    id: 'g1_p√°jaros_vuelan_simple',
    problemTextTemplate: (n1, n2) => `Hay ${n1} p√°jaro${n1 === 1 ? '' : 's'} en el √°rbol. Se vuelan ${n2}. ¬øCu√°ntos p√°jaros quedan?`,
    operation: '-', data1Label: 'P√°jaros hab√≠a', data1Unit: 'p√°jaros', data2Label: 'Se vuelan', data2Unit: 'p√°jaros',
    resultLabelTemplate: (res) => `Quedan ${res} p√°jaro${res === 1 ? '' : 's'}.`, icon: 'üê¶',
  },
  {
    id: 'g1_caramelos_comparte_simple',
    problemTextTemplate: (n1, n2) => `Tienes ${n1} caramelo${n1 === 1 ? '' : 's'}. Compartes ${n2}. ¬øCu√°ntos caramelos te quedan?`,
    operation: '-', data1Label: 'Caramelos ten√≠as', data1Unit: 'caramelos', data2Label: 'Compartes', data2Unit: 'caramelos',
    resultLabelTemplate: (res) => `Te quedan ${res} caramelo${res === 1 ? '' : 's'}.`, icon: 'üç¨',
  },
  {
    id: 'g1_estrellas_desaparecen_simple',
    problemTextTemplate: (n1, n2) => `En el cielo hay ${n1} ${n1 === 1 ? 'estrella' : 'estrellas'}. Desaparecen ${n2}. ¬øCu√°ntas estrellas quedan?`,
    operation: '-', data1Label: 'Estrellas hab√≠a', data1Unit: 'estrellas', data2Label: 'Desaparecen', data2Unit: 'estrellas',
    resultLabelTemplate: (res) => `Quedan ${res} ${res === 1 ? 'estrella' : 'estrellas'}.`, icon: 'üåü',
  },
  {
    id: 'g1_burbujas_explotan_simple',
    problemTextTemplate: (n1, n2) => `Haces ${n1} ${n1 === 1 ? 'burbuja' : 'burbujas'}. Se explotan ${n2}. ¬øCu√°ntas burbujas quedan?`,
    operation: '-', data1Label: 'Burbujas hiciste', data1Unit: 'burbujas', data2Label: 'Explotan', data2Unit: 'burbujas',
    resultLabelTemplate: (res) => `Quedan ${res} ${res === 1 ? 'burbuja' : 'burbujas'}.`, icon: 'ü´ß',
  },
  {
    id: 'g1_velas_apagan_simple',
    problemTextTemplate: (n1, n2) => `Hay ${n1} ${n1 === 1 ? 'vela' : 'velas'} encendidas. Se apagan ${n2}. ¬øCu√°ntas velas quedan prendidas?`,
    operation: '-', data1Label: 'Velas encendidas', data1Unit: 'velas', data2Label: 'Se apagan', data2Unit: 'velas',
    resultLabelTemplate: (res) => `Quedan ${res} ${res === 1 ? 'vela' : 'velas'} prendidas.`, icon: 'üïØÔ∏è',
  },
   {
    id: 'g1_botones_caen_simple',
    problemTextTemplate: (n1, n2) => `Una camisa tiene ${n1} ${n1 === 1 ? 'bot√≥n' : 'botones'}. Se caen ${n2}. ¬øCu√°ntos botones quedan?`,
    operation: '-', data1Label: 'Botones ten√≠a', data1Unit: 'botones', data2Label: 'Se caen', data2Unit: 'botones',
    resultLabelTemplate: (res) => `Quedan ${res} ${res === 1 ? 'bot√≥n' : 'botones'}.`, icon: 'üîò',
  },
  {
    id: 'g1_hojas_caen_arbol_simple',
    problemTextTemplate: (n1, n2) => `Un √°rbol tiene ${n1} ${n1 === 1 ? 'hoja' : 'hojas'}. Se caen ${n2}. ¬øCu√°ntas hojas le quedan al √°rbol?`,
    operation: '-', data1Label: 'Hojas ten√≠a', data1Unit: 'hojas', data2Label: 'Se caen', data2Unit: 'hojas',
    resultLabelTemplate: (res) => `Al √°rbol le quedan ${res} ${res === 1 ? 'hoja' : 'hojas'}.`, icon: 'üçÇ',
  },
];

// --- SCENARIOS FOR 1ST GRADE: Results < 100, simple 2-digit + 1-digit or tens ---
const firstGradeTensSimpleTwoDigitScenarios: Scenario[] = [
  // Sumas
  {
    id: 'g1_figus_decenas_suma',
    problemTextTemplate: (n1, n2) => `Tienes ${n1} figuritas. Te regalan ${n2} m√°s. ¬øCu√°ntas figuritas tienes ahora?`,
    operation: '+', data1Label: 'Figuritas ten√≠as', data1Unit: 'figuritas', data2Label: 'Te regalan', data2Unit: 'figuritas',
    resultLabelTemplate: (res) => `Ahora tienes ${res} figuritas.`, icon: '‚ú®',
  },
  {
    id: 'g1_puntos_juego_suma',
    problemTextTemplate: (n1, n2) => `En un juego, ganas ${n1} puntos y luego ${n2} puntos m√°s. ¬øCu√°ntos puntos tienes en total?`,
    operation: '+', data1Label: 'Puntos ganas', data1Unit: 'puntos', data2Label: 'Ganas m√°s', data2Unit: 'puntos',
    resultLabelTemplate: (res) => `Tienes ${res} puntos en total.`, icon: 'üéØ',
  },
  {
    id: 'g1_crayones_caja_suma',
    problemTextTemplate: (n1, n2) => `Una caja tiene ${n1} crayones. Agregas ${n2} crayones m√°s. ¬øCu√°ntos crayones hay ahora?`,
    operation: '+', data1Label: 'Crayones hab√≠a', data1Unit: 'crayones', data2Label: 'Agregas', data2Unit: 'crayones',
    resultLabelTemplate: (res) => `Ahora hay ${res} crayones.`, icon: 'üñçÔ∏è',
  },
  {
    id: 'g1_monedas_alcancia_suma',
    problemTextTemplate: (n1, n2) => `Pones ${n1} monedas en tu alcanc√≠a. Luego pones ${n2} monedas m√°s. ¬øCu√°ntas monedas pusiste en total?`,
    operation: '+', data1Label: 'Monedas pones', data1Unit: 'monedas', data2Label: 'Pones m√°s', data2Unit: 'monedas',
    resultLabelTemplate: (res) => `Pusiste ${res} monedas en total.`, icon: 'ü™ô',
  },
  {
    id: 'g1_pegatinas_album_suma',
    problemTextTemplate: (n1, n2) => `Tienes ${n1} pegatinas. Consigues ${n2} m√°s. ¬øCu√°ntas pegatinas tienes en total?`,
    operation: '+', data1Label: 'Pegatinas ten√≠as', data1Unit: 'pegatinas', data2Label: 'Consigues m√°s', data2Unit: 'pegatinas',
    resultLabelTemplate: (res) => `Tienes ${res} pegatinas en total.`, icon: 'üåü',
  },
  {
    id: 'g1_cartas_mazo_suma',
    problemTextTemplate: (n1, n2) => `En un mazo hay ${n1} cartas. Se a√±aden ${n2} cartas nuevas. ¬øCu√°ntas cartas hay ahora?`,
    operation: '+', data1Label: 'Cartas hab√≠a', data1Unit: 'cartas', data2Label: 'Se a√±aden', data2Unit: 'cartas',
    resultLabelTemplate: (res) => `Ahora hay ${res} cartas.`, icon: 'üÉè',
  },
  {
    id: 'g1_bloques_construccion_suma',
    problemTextTemplate: (n1, n2) => `Usas ${n1} bloques para una torre. Luego agregas ${n2} bloques m√°s. ¬øCu√°ntos bloques usaste?`,
    operation: '+', data1Label: 'Bloques usas', data1Unit: 'bloques', data2Label: 'Agregas m√°s', data2Unit: 'bloques',
    resultLabelTemplate: (res) => `Usaste ${res} bloques.`, icon: 'üß±',
  },
  {
    id: 'g1_canciones_escuchas_suma',
    problemTextTemplate: (n1, n2) => `Escuchas ${n1} canciones. Despu√©s escuchas ${n2} canciones m√°s. ¬øCu√°ntas canciones escuchaste?`,
    operation: '+', data1Label: 'Canciones escuchas', data1Unit: 'canciones', data2Label: 'Escuchas m√°s', data2Unit: 'canciones',
    resultLabelTemplate: (res) => `Escuchaste ${res} canciones.`, icon: 'üé∂',
  },
  {
    id: 'g1_pasos_caminas_suma',
    problemTextTemplate: (n1, n2) => `Caminas ${n1} pasos. Luego caminas ${n2} pasos m√°s. ¬øCu√°ntos pasos caminaste en total?`,
    operation: '+', data1Label: 'Pasos caminas', data1Unit: 'pasos', data2Label: 'Caminas m√°s', data2Unit: 'pasos',
    resultLabelTemplate: (res) => `Caminaste ${res} pasos en total.`, icon: 'üë£',
  },
  {
    id: 'g1_animalitos_granja_suma',
    problemTextTemplate: (n1, n2) => `En una granja hay ${n1} pollitos. Nacen ${n2} m√°s. ¬øCu√°ntos pollitos hay ahora?`,
    operation: '+', data1Label: 'Pollitos hab√≠a', data1Unit: 'pollitos', data2Label: 'Nacen m√°s', data2Unit: 'pollitos',
    resultLabelTemplate: (res) => `Ahora hay ${res} pollitos.`, icon: 'üê§',
  },
  // Restas
  {
    id: 'g1_dinero_gasta_resta',
    problemTextTemplate: (n1, n2) => `Tienes ${n1} pesos. Gastas ${n2} pesos en un helado. ¬øCu√°nto dinero te queda?`,
    operation: '-', data1Label: 'Pesos ten√≠as', data1Unit: 'pesos', data2Label: 'Gastas', data2Unit: 'pesos',
    resultLabelTemplate: (res) => `Te quedan ${res} pesos.`, icon: 'üí∏',
  },
  {
    id: 'g1_galletas_caja_resta',
    problemTextTemplate: (n1, n2) => `Una caja tiene ${n1} galletas. Te comes ${n2}. ¬øCu√°ntas galletas quedan en la caja?`,
    operation: '-', data1Label: 'Galletas hab√≠a', data1Unit: 'galletas', data2Label: 'Te comes', data2Unit: 'galletas',
    resultLabelTemplate: (res) => `Quedan ${res} galletas en la caja.`, icon: 'üç™',
  },
  {
    id: 'g1_hojas_cuaderno_resta',
    problemTextTemplate: (n1, n2) => `Tu cuaderno tiene ${n1} hojas. Usas ${n2} hojas para dibujar. ¬øCu√°ntas hojas quedan?`,
    operation: '-', data1Label: 'Hojas ten√≠a', data1Unit: 'hojas', data2Label: 'Usas', data2Unit: 'hojas',
    resultLabelTemplate: (res) => `Quedan ${res} hojas.`, icon: 'üóíÔ∏è',
  },
  {
    id: 'g1_pasajeros_tren_resta',
    problemTextTemplate: (n1, n2) => `En el tren viajan ${n1} personas. Se bajan ${n2} en una estaci√≥n. ¬øCu√°ntas personas siguen en el tren?`,
    operation: '-', data1Label: 'Personas viajaban', data1Unit: 'personas', data2Label: 'Se bajan', data2Unit: 'personas',
    resultLabelTemplate: (res) => `Siguen ${res} personas en el tren.`, icon: 'üöÜ',
  },
  {
    id: 'g1_juguetes_guardados_resta',
    problemTextTemplate: (n1, n2) => `Ten√≠as ${n1} juguetes. Guardaste ${n2} en una caja. ¬øCu√°ntos juguetes te quedaron afuera?`,
    operation: '-', data1Label: 'Juguetes ten√≠as', data1Unit: 'juguetes', data2Label: 'Guardaste', data2Unit: 'juguetes',
    resultLabelTemplate: (res) => `Te quedaron ${res} juguetes afuera.`, icon: 'üì¶',
  },
  {
    id: 'g1_libros_leidos_resta',
    problemTextTemplate: (n1, n2) => `Tienes ${n1} libros por leer. Ya le√≠ste ${n2}. ¬øCu√°ntos libros te faltan leer?`,
    operation: '-', data1Label: 'Libros por leer', data1Unit: 'libros', data2Label: 'Le√≠ste', data2Unit: 'libros',
    resultLabelTemplate: (res) => `Te faltan leer ${res} libros.`, icon: 'üìñ',
  },
  {
    id: 'g1_globos_fiesta_revientan_resta',
    problemTextTemplate: (n1, n2) => `Hab√≠a ${n1} globos en la fiesta. Se reventaron ${n2}. ¬øCu√°ntos globos quedaron?`,
    operation: '-', data1Label: 'Globos hab√≠a', data1Unit: 'globos', data2Label: 'Reventaron', data2Unit: 'globos',
    resultLabelTemplate: (res) => `Quedaron ${res} globos.`, icon: 'üéà',
  },
  {
    id: 'g1_manzanas_cesta_comen_resta',
    problemTextTemplate: (n1, n2) => `Una cesta tiene ${n1} manzanas. Te comes ${n2} manzanas. ¬øCu√°ntas quedan en la cesta?`,
    operation: '-', data1Label: 'Manzanas hab√≠a', data1Unit: 'manzanas', data2Label: 'Te comes', data2Unit: 'manzanas',
    resultLabelTemplate: (res) => `Quedan ${res} manzanas en la cesta.`, icon: 'üß∫',
  },
  {
    id: 'g1_flores_ramo_marchitan_resta',
    problemTextTemplate: (n1, n2) => `Un ramo tiene ${n1} flores. Se marchitan ${n2}. ¬øCu√°ntas flores bonitas quedan?`,
    operation: '-', data1Label: 'Flores hab√≠a', data1Unit: 'flores', data2Label: 'Se marchitan', data2Unit: 'flores',
    resultLabelTemplate: (res) => `Quedan ${res} flores bonitas.`, icon: 'üíê',
  },
  {
    id: 'g1_peces_pecera_regalan_resta',
    problemTextTemplate: (n1, n2) => `Tienes ${n1} peces en tu pecera. Regalas ${n2} a un amigo. ¬øCu√°ntos peces te quedan?`,
    operation: '-', data1Label: 'Peces ten√≠as', data1Unit: 'peces', data2Label: 'Regalas', data2Unit: 'peces',
    resultLabelTemplate: (res) => `Te quedan ${res} peces.`, icon: 'üê†',
  },
];


// --- Existing Scenarios (from user's initial files) ---
const generalScenarios: Scenario[] = [
  {
    id: 'tractor_cereales',
    problemTextTemplate: (n1, n2) => `Un tractor transporta ${n1} kilos de ma√≠z y ${n2} kilos de trigo. ¬øCu√°ntos kilos de cereal transporta en total?`,
    operation: '+',
    data1Label: 'De ma√≠z',
    data1Unit: 'kilos',
    data2Label: 'De trigo',
    data2Unit: 'kilos',
    resultLabelTemplate: (res) => `El tractor transporta ${res} kilos de cereal en total.`,
    icon: 'üöú',
  },
  {
    id: 'pasajeros_colectivo_suben',
    problemTextTemplate: (n1, n2) => `En un colectivo viajan ${n1} pasajeros. En la primera parada, suben ${n2} pasajeros m√°s. ¬øCu√°ntos pasajeros hay ahora en el colectivo?`,
    operation: '+',
    data1Label: 'Pasajeros iniciales',
    data1Unit: 'pasajeros',
    data2Label: 'Suben en parada',
    data2Unit: 'pasajeros',
    resultLabelTemplate: (res) => `Ahora hay ${res} pasajeros en el colectivo.`,
    icon: 'üöå',
  },
  {
    id: 'pasajeros_colectivo_bajan',
    problemTextTemplate: (n1, n2) => `Un colectivo lleva ${n1} pasajeros. En una parada se bajan ${n2} pasajeros. ¬øCu√°ntos pasajeros quedan en el colectivo?`,
    operation: '-',
    data1Label: 'Pasajeros hab√≠a',
    data1Unit: 'pasajeros',
    data2Label: 'Pasajeros bajan',
    data2Unit: 'pasajeros',
    resultLabelTemplate: (res) => `Quedan ${res} pasajeros en el colectivo.`,
    icon: 'üöå',
  },
  {
    id: 'galletas_caja',
    problemTextTemplate: (n1, n2) => `Mar√≠a ten√≠a ${n1} galletas en una caja. Si se comi√≥ ${n2} galletas, ¬øcu√°ntas galletas le quedan?`,
    operation: '-',
    data1Label: 'Galletas ten√≠a',
    data1Unit: 'galletas',
    data2Label: 'Galletas comi√≥',
    data2Unit: 'galletas',
    resultLabelTemplate: (res) => `A Mar√≠a le quedan ${res} galletas.`,
    icon: 'üç™',
  },
  {
    id: 'libros_estanteria_general',
    problemTextTemplate: (n1, n2) => `En una estanter√≠a hay ${n1} libros de cuentos y ${n2} libros de ciencia. ¬øCu√°ntos libros hay en total en la estanter√≠a?`,
    operation: '+',
    data1Label: 'Libros de cuentos',
    data1Unit: 'libros',
    data2Label: 'Libros de ciencia',
    data2Unit: 'libros',
    resultLabelTemplate: (res) => `En la estanter√≠a hay ${res} libros en total.`,
    icon: 'üìö',
  },
  {
    id: 'plata_ahorrada_gasta',
    problemTextTemplate: (n1, n2) => `Laura ten√≠a ${n1} pesos ahorrados. Si gast√≥ ${n2} pesos en un juguete, ¬øcu√°nta plata le queda?`,
    operation: '-',
    data1Label: 'Plata ahorrada',
    data1Unit: 'pesos',
    data2Label: 'Plata gastada',
    data2Unit: 'pesos',
    resultLabelTemplate: (res) => `A Laura le quedan ${res} pesos.`,
    icon: 'üí∞',
  },
  {
    id: 'plata_recibe_total',
    problemTextTemplate: (n1, n2) => `Carlos tiene ${n1} pesos en su alcanc√≠a. Su abuela le da ${n2} pesos por su cumplea√±os. ¬øCu√°nta plata tiene ahora Carlos?`,
    operation: '+',
    data1Label: 'Plata ten√≠a',
    data1Unit: 'pesos',
    data2Label: 'Plata recibe',
    data2Unit: 'pesos',
    resultLabelTemplate: (res) => `Carlos tiene ahora ${res} pesos.`,
    icon: 'üéÅ',
  },
  {
    id: 'arboles_parque_plantan',
    problemTextTemplate: (n1, n2) => `En un parque hab√≠a ${n1} √°rboles. Plantaron ${n2} √°rboles m√°s. ¬øCu√°ntos √°rboles hay ahora en el parque?`,
    operation: '+',
    data1Label: '√Årboles hab√≠a',
    data1Unit: '√°rboles',
    data2Label: '√Årboles plantaron',
    data2Unit: '√°rboles',
    resultLabelTemplate: (res) => `Ahora hay ${res} √°rboles en el parque.`,
    icon: 'üå≥',
  },
  {
    id: 'arboles_parque_quitan',
    problemTextTemplate: (n1, n2) => `En un bosque hab√≠a ${n1} pinos. Si se talaron ${n2} pinos, ¬øcu√°ntos pinos quedaron?`,
    operation: '-',
    data1Label: 'Pinos hab√≠a',
    data1Unit: 'pinos',
    data2Label: 'Pinos talados',
    data2Unit: 'pinos',
    resultLabelTemplate: (res) => `Quedaron ${res} pinos.`,
    icon: 'üå≤',
  },
  {
    id: 'figuritas_album_regala',
    problemTextTemplate: (n1, n2) => `Pedro tiene un √°lbum con ${n1} figuritas. Su amigo le regal√≥ ${n2} figuritas m√°s. ¬øCu√°ntas figuritas tiene Pedro en total?`,
    operation: '+',
    data1Label: 'Figuritas ten√≠a',
    data1Unit: 'figuritas',
    data2Label: 'Figuritas regaladas',
    data2Unit: 'figuritas',
    resultLabelTemplate: (res) => `Pedro tiene ${res} figuritas en total.`,
    icon: 'üñºÔ∏è',
  },
  {
    id: 'figuritas_album_pierde',
    problemTextTemplate: (n1, n2) => `Ana tiene ${n1} figuritas repetidas. Si pierde ${n2} de ellas, ¬øcu√°ntas figuritas repetidas le quedan?`,
    operation: '-',
    data1Label: 'Figuritas repetidas',
    data1Unit: 'figuritas',
    data2Label: 'Figuritas perdidas',
    data2Unit: 'figuritas',
    resultLabelTemplate: (res) => `A Ana le quedan ${res} figuritas repetidas.`,
    icon: 'üÉè',
  },
  {
    id: 'flores_jardin',
    problemTextTemplate: (n1, n2) => `En un jard√≠n florecieron ${n1} rosas rojas y ${n2} rosas blancas. ¬øCu√°ntas rosas florecieron en total?`,
    operation: '+',
    data1Label: 'Rosas rojas',
    data1Unit: 'rosas',
    data2Label: 'Rosas blancas',
    data2Unit: 'rosas',
    resultLabelTemplate: (res) => `Florecieron ${res} rosas en total.`,
    icon: 'üåπ',
  },
  {
    id: 'flores_marchitan',
    problemTextTemplate: (n1, n2) => `Un florero ten√≠a ${n1} margaritas. Se marchitaron ${n2} margaritas. ¬øCu√°ntas margaritas frescas quedan?`,
    operation: '-',
    data1Label: 'Margaritas hab√≠a',
    data1Unit: 'margaritas',
    data2Label: 'Se marchitaron',
    data2Unit: 'margaritas',
    resultLabelTemplate: (res) => `Quedan ${res} margaritas frescas.`,
    icon: 'üåº',
  },
  {
    id: 'piezas_rompecabezas',
    problemTextTemplate: (n1, n2) => `Un rompecabezas tiene ${n1} piezas. Si ya se han colocado ${n2} piezas, ¬øcu√°ntas piezas faltan por colocar?`,
    operation: '-',
    data1Label: 'Total piezas',
    data1Unit: 'piezas',
    data2Label: 'Piezas colocadas',
    data2Unit: 'piezas',
    resultLabelTemplate: (res) => `Faltan ${res} piezas por colocar.`,
    icon: 'üß©',
  },
  {
    id: 'animales_granja',
    problemTextTemplate: (n1, n2) => `En una granja hay ${n1} gallinas y ${n2} vacas. ¬øCu√°ntos animales de estos dos tipos hay en la granja?`,
    operation: '+',
    data1Label: 'Gallinas',
    data1Unit: 'gallinas',
    data2Label: 'Vacas',
    data2Unit: 'vacas',
    resultLabelTemplate: (res) => `Hay ${res} animales (gallinas y vacas) en la granja.`,
    icon: 'üêî',
  },
  {
    id: 'peces_acuario_venden',
    problemTextTemplate: (n1, n2) => `En una tienda de mascotas hab√≠a ${n1} peces en un acuario. Si vendieron ${n2} peces, ¬øcu√°ntos quedan?`,
    operation: '-',
    data1Label: 'Peces hab√≠a',
    data1Unit: 'peces',
    data2Label: 'Peces vendidos',
    data2Unit: 'peces',
    resultLabelTemplate: (res) => `Quedan ${res} peces en el acuario.`,
    icon: 'üê†',
  },
  {
    id: 'manzanas_cesta_compra',
    problemTextTemplate: (n1, n2) => `Una cesta tiene ${n1} manzanas rojas. Se a√±aden ${n2} manzanas verdes. ¬øCu√°ntas manzanas hay ahora en la cesta?`,
    operation: '+',
    data1Label: 'Manzanas rojas',
    data1Unit: 'manzanas',
    data2Label: 'Manzanas verdes',
    data2Unit: 'manzanas',
    resultLabelTemplate: (res) => `Ahora hay ${res} manzanas en la cesta.`,
    icon: 'üçé',
  },
  {
    id: 'naranjas_bolsa_come',
    problemTextTemplate: (n1, n2) => `Juan compr√≥ una bolsa con ${n1} naranjas. Si se come ${n2} naranjas, ¬øcu√°ntas le quedan?`,
    operation: '-',
    data1Label: 'Naranjas compr√≥',
    data1Unit: 'naranjas',
    data2Label: 'Naranjas comi√≥',
    data2Unit: 'naranjas',
    resultLabelTemplate: (res) => `A Juan le quedan ${res} naranjas.`,
    icon: 'üçä',
  },
  {
    id: 'alumnos_clase',
    problemTextTemplate: (n1, n2) => `En una clase hay ${n1} nenes y ${n2} nenas. ¬øCu√°ntos alumnos hay en total?`,
    operation: '+',
    data1Label: 'Nenes',
    data1Unit: 'alumnos',
    data2Label: 'Nenas',
    data2Unit: 'alumnas',
    resultLabelTemplate: (res) => `Hay ${res} alumnos en total en la clase.`,
    icon: 'üßë‚Äçüè´',
  },
  {
    id: 'alumnos_excursion_faltan',
    problemTextTemplate: (n1, n2) => `A una excursi√≥n iban a ir ${n1} alumnos. Si finalmente ${n2} alumnos no pudieron ir, ¬øcu√°ntos alumnos fueron a la excursi√≥n?`,
    operation: '-',
    data1Label: 'Alumnos iban',
    data1Unit: 'alumnos',
    data2Label: 'Alumnos faltaron',
    data2Unit: 'alumnos',
    resultLabelTemplate: (res) => `Fueron ${res} alumnos a la excursi√≥n.`,
    icon: 'üéí',
  },
  {
    id: 'paginas_libro',
    problemTextTemplate: (n1, n2) => `Un libro tiene ${n1} p√°ginas. Si ya he le√≠do ${n2} p√°ginas, ¬øcu√°ntas me faltan por leer?`,
    operation: '-',
    data1Label: 'Total p√°ginas',
    data1Unit: 'p√°ginas',
    data2Label: 'P√°ginas le√≠das',
    data2Unit: 'p√°ginas',
    resultLabelTemplate: (res) => `Me faltan ${res} p√°ginas por leer.`,
    icon: 'üìñ',
  },
  {
    id: 'canicas_bolsa_gana',
    problemTextTemplate: (n1, n2) => `Luis tiene ${n1} canicas en una bolsa. Jugando con un amigo, gana ${n2} canicas m√°s. ¬øCu√°ntas canicas tiene ahora Luis?`,
    operation: '+',
    data1Label: 'Canicas ten√≠a',
    data1Unit: 'canicas',
    data2Label: 'Canicas gan√≥',
    data2Unit: 'canicas',
    resultLabelTemplate: (res) => `Luis tiene ahora ${res} canicas.`,
    icon: 'üîÆ', 
  },
  {
    id: 'globos_fiesta_explotan',
    problemTextTemplate: (n1, n2) => `Para una fiesta se inflaron ${n1} globos. Si se explotaron ${n2} globos, ¬øcu√°ntos globos quedaron inflados?`,
    operation: '-',
    data1Label: 'Globos inflados',
    data1Unit: 'globos',
    data2Label: 'Globos explotaron',
    data2Unit: 'globos',
    resultLabelTemplate: (res) => `Quedaron ${res} globos inflados.`,
    icon: 'üéà',
  },
  {
    id: 'autos_estacionamiento_entran',
    problemTextTemplate: (n1, n2) => `En un estacionamiento hay ${n1} autos. Durante la ma√±ana entran ${n2} autos m√°s. ¬øCu√°ntos autos hay ahora?`,
    operation: '+',
    data1Label: 'Autos hab√≠a',
    data1Unit: 'autos',
    data2Label: 'Autos entran',
    data2Unit: 'autos',
    resultLabelTemplate: (res) => `Ahora hay ${res} autos en el estacionamiento.`,
    icon: 'üöó',
  },
  {
    id: 'autos_estacionamiento_salen',
    problemTextTemplate: (n1, n2) => `Un estacionamiento tiene ${n1} lugares ocupados. Si salen ${n2} autos, ¬øcu√°ntos lugares ocupados quedan?`,
    operation: '-',
    data1Label: 'Lugares ocupados',
    data1Unit: 'lugares',
    data2Label: 'Autos salen',
    data2Unit: 'autos',
    resultLabelTemplate: (res) => `Quedan ${res} lugares ocupados.`,
    icon: 'üÖøÔ∏è',
  },
  {
    id: 'lapices_estuche_pierde',
    problemTextTemplate: (n1, n2) => `Mario ten√≠a ${n1} l√°pices de colores en su cartuchera. Perdi√≥ ${n2} l√°pices. ¬øCu√°ntos l√°pices le quedan?`,
    operation: '-',
    data1Label: 'L√°pices ten√≠a',
    data1Unit: 'l√°pices',
    data2Label: 'L√°pices perdi√≥',
    data2Unit: 'l√°pices',
    resultLabelTemplate: (res) => `A Mario le quedan ${res} l√°pices.`,
    icon: '‚úèÔ∏è',
  },
  {
    id: 'juguetes_caja_guarda_general', 
    problemTextTemplate: (n1, n2) => `En una caja hab√≠a ${n1} juguetes. Mam√° guard√≥ ${n2} juguetes m√°s. ¬øCu√°ntos juguetes hay ahora en la caja?`,
    operation: '+',
    data1Label: 'Juguetes hab√≠a',
    data1Unit: 'juguetes',
    data2Label: 'Juguetes guard√≥',
    data2Unit: 'juguetes',
    resultLabelTemplate: (res) => `Ahora hay ${res} juguetes en la caja.`,
    icon: 'üß∏',
  },
  {
    id: 'pajaros_arbol_vuelan',
    problemTextTemplate: (n1, n2) => `En un √°rbol hab√≠a ${n1} p√°jaros cantando. Si ${n2} p√°jaros se fueron volando, ¬øcu√°ntos p√°jaros quedaron en el √°rbol?`,
    operation: '-',
    data1Label: 'P√°jaros hab√≠a',
    data1Unit: 'p√°jaros',
    data2Label: 'P√°jaros volaron',
    data2Unit: 'p√°jaros',
    resultLabelTemplate: (res) => `Quedaron ${res} p√°jaros en el √°rbol.`,
    icon: 'üê¶',
  },
  {
    id: 'caramelos_bolsa_reparte',
    problemTextTemplate: (n1, n2) => `Una bolsa tiene ${n1} caramelos. Si se reparten ${n2} caramelos entre los amigos, ¬øcu√°ntos caramelos quedan en la bolsa?`,
    operation: '-',
    data1Label: 'Caramelos hab√≠a',
    data1Unit: 'caramelos',
    data2Label: 'Caramelos repartidos',
    data2Unit: 'caramelos',
    resultLabelTemplate: (res) => `Quedan ${res} caramelos en la bolsa.`,
    icon: 'üç¨',
  },
  {
    id: 'fotos_album_pega',
    problemTextTemplate: (n1, n2) => `Un √°lbum de fotos tiene ${n1} fotos pegadas. Hoy se han pegado ${n2} fotos m√°s. ¬øCu√°ntas fotos tiene ahora el √°lbum?`,
    operation: '+',
    data1Label: 'Fotos hab√≠a',
    data1Unit: 'fotos',
    data2Label: 'Fotos pegadas hoy',
    data2Unit: 'fotos',
    resultLabelTemplate: (res) => `El √°lbum tiene ahora ${res} fotos.`,
    icon: 'üì∏',
  },
  {
    id: 'ovejas_reba√±o_pierden',
    problemTextTemplate: (n1, n2) => `Un pastor tiene un reba√±o de ${n1} ovejas. Si se le pierden ${n2} ovejas, ¬øcu√°ntas le quedan?`,
    operation: '-',
    data1Label: 'Ovejas ten√≠a',
    data1Unit: 'ovejas',
    data2Label: 'Ovejas perdidas',
    data2Unit: 'ovejas',
    resultLabelTemplate: (res) => `Al pastor le quedan ${res} ovejas.`,
    icon: 'üêë',
  },
  {
    id: 'figuritas_coleccion_consigue',
    problemTextTemplate: (n1, n2) => `En mi colecci√≥n tengo ${n1} figuritas. Hoy he conseguido ${n2} figuritas nuevas. ¬øCu√°ntas figuritas tengo ahora?`,
    operation: '+',
    data1Label: 'Figuritas ten√≠a',
    data1Unit: 'figuritas',
    data2Label: 'Figuritas nuevas',
    data2Unit: 'figuritas',
    resultLabelTemplate: (res) => `Ahora tengo ${res} figuritas.`,
    icon: 'üåü',
  },
  {
    id: 'jugos_heladera_beben',
    problemTextTemplate: (n1, n2) => `En la heladera hab√≠a ${n1} jugos. Mis hermanos y yo nos hemos tomado ${n2} jugos. ¬øCu√°ntos jugos quedan?`,
    operation: '-',
    data1Label: 'Jugos hab√≠a',
    data1Unit: 'jugos',
    data2Label: 'Jugos tomados',
    data2Unit: 'jugos',
    resultLabelTemplate: (res) => `Quedan ${res} jugos en la heladera.`,
    icon: 'ü•§',
  },
  {
    id: 'remeras_armario_compra',
    problemTextTemplate: (n1, n2) => `En el armario tengo ${n1} remeras. Me han comprado ${n2} remeras nuevas. ¬øCu√°ntas remeras tengo ahora?`,
    operation: '+',
    data1Label: 'Remeras ten√≠a',
    data1Unit: 'remeras',
    data2Label: 'Remeras nuevas',
    data2Unit: 'remeras',
    resultLabelTemplate: (res) => `Ahora tengo ${res} remeras.`,
    icon: 'üëï',
  },
  {
    id: 'bombones_caja_come',
    problemTextTemplate: (n1, n2) => `Una caja ten√≠a ${n1} bombones. Me he comido ${n2} bombones. ¬øCu√°ntos bombones quedan en la caja?`,
    operation: '-',
    data1Label: 'Bombones hab√≠a',
    data1Unit: 'bombones',
    data2Label: 'Bombones comidos',
    data2Unit: 'bombones',
    resultLabelTemplate: (res) => `Quedan ${res} bombones en la caja.`,
    icon: 'üç´',
  },
  {
    id: 'colores_caja_a√±ade',
    problemTextTemplate: (n1, n2) => `Una caja de pinturas tiene ${n1} colores. Si a√±adimos ${n2} colores m√°s, ¬øcu√°ntos colores tendr√° la caja?`,
    operation: '+',
    data1Label: 'Colores ten√≠a',
    data1Unit: 'colores',
    data2Label: 'Colores a√±adidos',
    data2Unit: 'colores',
    resultLabelTemplate: (res) => `La caja tendr√° ${res} colores.`,
    icon: 'üé®',
  },
  {
    id: 'sillas_aula_retiran',
    problemTextTemplate: (n1, n2) => `En un aula hay ${n1} sillas. Si se retiran ${n2} sillas para limpiarlas, ¬øcu√°ntas sillas quedan en el aula?`,
    operation: '-',
    data1Label: 'Sillas hab√≠a',
    data1Unit: 'sillas',
    data2Label: 'Sillas retiradas',
    data2Unit: 'sillas',
    resultLabelTemplate: (res) => `Quedan ${res} sillas en el aula.`,
    icon: 'ü™ë',
  },
  {
    id: 'barcos_puerto_llegan',
    problemTextTemplate: (n1, n2) => `En un puerto hay ${n1} barcos. Si llegan ${n2} barcos m√°s, ¬øcu√°ntos barcos hay ahora en el puerto?`,
    operation: '+',
    data1Label: 'Barcos hab√≠a',
    data1Unit: 'barcos',
    data2Label: 'Barcos llegan',
    data2Unit: 'barcos',
    resultLabelTemplate: (res) => `Ahora hay ${res} barcos en el puerto.`,
    icon: '‚õµ',
  },
  {
    id: 'aviones_aeropuerto_despegan',
    problemTextTemplate: (n1, n2) => `En un aeropuerto hay ${n1} aviones listos para volar. Si despegan ${n2} aviones, ¬øcu√°ntos quedan en tierra?`,
    operation: '-',
    data1Label: 'Aviones listos',
    data1Unit: 'aviones',
    data2Label: 'Aviones despegan',
    data2Unit: 'aviones',
    resultLabelTemplate: (res) => `Quedan ${res} aviones en tierra.`,
    icon: '‚úàÔ∏è',
  },
  {
    id: 'herramientas_caja_a√±ade',
    problemTextTemplate: (n1, n2) => `Pap√° tiene una caja con ${n1} herramientas. Si compra ${n2} herramientas m√°s, ¬øcu√°ntas tendr√° ahora?`,
    operation: '+',
    data1Label: 'Herramientas ten√≠a',
    data1Unit: 'herramientas',
    data2Label: 'Herramientas compr√≥',
    data2Unit: 'herramientas',
    resultLabelTemplate: (res) => `Pap√° tendr√° ahora ${res} herramientas.`,
    icon: 'üõ†Ô∏è',
  },
  {
    id: 'tornillos_caja_usa',
    problemTextTemplate: (n1, n2) => `Una caja contiene ${n1} tornillos. Si se usan ${n2} tornillos para un mueble, ¬øcu√°ntos quedan?`,
    operation: '-',
    data1Label: 'Tornillos hab√≠a',
    data1Unit: 'tornillos',
    data2Label: 'Tornillos usados',
    data2Unit: 'tornillos',
    resultLabelTemplate: (res) => `Quedan ${res} tornillos en la caja.`,
    icon: 'üî©',
  },
   {
    id: 'perros_parque_llegan',
    problemTextTemplate: (n1, n2) => `En el parque est√°n jugando ${n1} perros. Si llegan ${n2} perros m√°s, ¬øcu√°ntos perros hay jugando ahora?`,
    operation: '+',
    data1Label: 'Perros jugando',
    data1Unit: 'perros',
    data2Label: 'Perros llegan',
    data2Unit: 'perros',
    resultLabelTemplate: (res) => `Ahora hay ${res} perros jugando en el parque.`,
    icon: 'üêï',
  },
  {
    id: 'gatos_casa_adoptan',
    problemTextTemplate: (n1, n2) => `En una casa viven ${n1} gatos. Si la familia adopta ${n2} gatos m√°s, ¬øcu√°ntos gatos viven ahora en la casa?`,
    operation: '+',
    data1Label: 'Gatos viv√≠an',
    data1Unit: 'gatos',
    data2Label: 'Gatos adoptan',
    data2Unit: 'gatos',
    resultLabelTemplate: (res) => `Ahora viven ${res} gatos en la casa.`,
    icon: 'üêà',
  },
  {
    id: 'nubes_cielo_desaparecen',
    problemTextTemplate: (n1, n2) => `Por la ma√±ana hab√≠a ${n1} nubes en el cielo. Al mediod√≠a, ${n2} nubes se hab√≠an disipado. ¬øCu√°ntas nubes quedan?`,
    operation: '-',
    data1Label: 'Nubes hab√≠a',
    data1Unit: 'nubes',
    data2Label: 'Nubes disipadas',
    data2Unit: 'nubes',
    resultLabelTemplate: (res) => `Quedan ${res} nubes en el cielo.`,
    icon: '‚òÅÔ∏è',
  },
  {
    id: 'estrellas_noche_cuento',
    problemTextTemplate: (n1, n2) => `Anoche cont√© ${n1} estrellas brillantes. Luego, cont√© otras ${n2} estrellas m√°s d√©biles. ¬øCu√°ntas estrellas cont√© en total?`,
    operation: '+',
    data1Label: 'Estrellas brillantes',
    data1Unit: 'estrellas',
    data2Label: 'Estrellas d√©biles',
    data2Unit: 'estrellas',
    resultLabelTemplate: (res) => `Cont√© ${res} estrellas en total.`,
    icon: 'üå†',
  },
  {
    id: 'botellas_agua_reciclan',
    problemTextTemplate: (n1, n2) => `En una semana, una familia junt√≥ ${n1} botellas de pl√°stico para reciclar. La semana siguiente, juntaron ${n2} botellas. ¬øCu√°ntas botellas juntaron en total?`,
    operation: '+',
    data1Label: 'Botellas semana 1',
    data1Unit: 'botellas',
    data2Label: 'Botellas semana 2',
    data2Unit: 'botellas',
    resultLabelTemplate: (res) => `Juntaron ${res} botellas en total.`,
    icon: '‚ôªÔ∏è',
  },
  {
    id: 'hojas_cuaderno_arranca',
    problemTextTemplate: (n1, n2) => `Mi cuaderno ten√≠a ${n1} hojas. Arranqu√© ${n2} hojas para hacer un dibujo. ¬øCu√°ntas hojas le quedan al cuaderno?`,
    operation: '-',
    data1Label: 'Hojas ten√≠a',
    data1Unit: 'hojas',
    data2Label: 'Hojas arrancadas',
    data2Unit: 'hojas',
    resultLabelTemplate: (res) => `Al cuaderno le quedan ${res} hojas.`,
    icon: 'üóíÔ∏è',
  },
  {
    id: 'huevos_carton_usan',
    problemTextTemplate: (n1, n2) => `Un maple de huevos tiene ${n1} huevos. Si usamos ${n2} para hacer una tortilla, ¬øcu√°ntos huevos quedan?`,
    operation: '-',
    data1Label: 'Huevos hab√≠a',
    data1Unit: 'huevos',
    data2Label: 'Huevos usados',
    data2Unit: 'huevos',
    resultLabelTemplate: (res) => `Quedan ${res} huevos en el maple.`,
    icon: 'ü•ö',
  },
  {
    id: 'tren_vagones_a√±aden',
    problemTextTemplate: (n1, n2) => `Un tren tiene ${n1} vagones. En la estaci√≥n le a√±aden ${n2} vagones m√°s. ¬øCu√°ntos vagones tiene ahora el tren?`,
    operation: '+',
    data1Label: 'Vagones ten√≠a',
    data1Unit: 'vagones',
    data2Label: 'Vagones a√±adidos',
    data2Unit: 'vagones',
    resultLabelTemplate: (res) => `El tren tiene ahora ${res} vagones.`,
    icon: 'üöÜ',
  },
  {
    id: 'puntos_juego_gana',
    problemTextTemplate: (n1, n2) => `En un videojuego, ten√≠as ${n1} puntos y ganaste ${n2} puntos m√°s. ¬øCu√°ntos puntos tienes ahora?`,
    operation: '+',
    data1Label: 'Puntos iniciales', data1Unit: 'puntos',
    data2Label: 'Puntos ganados', data2Unit: 'puntos',
    resultLabelTemplate: (res) => `Ahora tienes ${res} puntos.`,
    icon: 'üéØ',
  },
  {
    id: 'cromos_cambia',
    problemTextTemplate: (n1, n2) => `Ten√≠as ${n1} cromos repetidos. Cambiaste ${n2} con un amigo. ¬øCu√°ntos cromos repetidos te quedan?`,
    operation: '-',
    data1Label: 'Cromos repetidos', data1Unit: 'cromos',
    data2Label: 'Cromos cambiados', data2Unit: 'cromos',
    resultLabelTemplate: (res) => `Te quedan ${res} cromos repetidos.`,
    icon: '‚ú®',
  },
  {
    id: 'paginas_libro_lunes_martes',
    problemTextTemplate: (n1, n2) => `Sof√≠a ley√≥ ${n1} p√°ginas de un libro el lunes y ${n2} p√°ginas el martes. ¬øCu√°ntas p√°ginas ley√≥ en total?`,
    operation: '+',
    data1Label: 'P√°ginas lunes', data1Unit: 'p√°ginas',
    data2Label: 'P√°ginas martes', data2Unit: 'p√°ginas',
    resultLabelTemplate: (res) => `Sof√≠a ley√≥ ${res} p√°ginas en total.`,
    icon: 'üìö',
  },
  {
    id: 'ovejas_granjero_vende',
    problemTextTemplate: (n1, n2) => `Un granjero ten√≠a ${n1} ovejas y vendi√≥ ${n2}. ¬øCu√°ntas ovejas le quedan?`,
    operation: '-',
    data1Label: 'Ovejas ten√≠a', data1Unit: 'ovejas',
    data2Label: 'Ovejas vendi√≥', data2Unit: 'ovejas',
    resultLabelTemplate: (res) => `Al granjero le quedan ${res} ovejas.`,
    icon: 'üêë',
  },
  {
    id: 'flores_jardin_rojas_amarillas',
    problemTextTemplate: (n1, n2) => `En un jard√≠n hay ${n1} flores rojas y ${n2} flores amarillas. ¬øCu√°ntas flores hay en total?`,
    operation: '+',
    data1Label: 'Flores rojas', data1Unit: 'flores',
    data2Label: 'Flores amarillas', data2Unit: 'flores',
    resultLabelTemplate: (res) => `En el jard√≠n hay ${res} flores en total.`,
    icon: 'üå∑',
  },
  {
    id: 'caramelos_pablo_regala',
    problemTextTemplate: (n1, n2) => `Pablo ten√≠a ${n1} caramelos y regal√≥ ${n2} a su amigo. ¬øCu√°ntos caramelos le quedan?`,
    operation: '-',
    data1Label: 'Caramelos ten√≠a', data1Unit: 'caramelos',
    data2Label: 'Caramelos regal√≥', data2Unit: 'caramelos',
    resultLabelTemplate: (res) => `A Pablo le quedan ${res} caramelos.`,
    icon: 'üç¨',
  },
  {
    id: 'goles_futbol_equipo',
    problemTextTemplate: (n1, n2) => `Un equipo de f√∫tbol marc√≥ ${n1} goles en el primer tiempo y ${n2} goles en el segundo. ¬øCu√°ntos goles marc√≥ en total?`,
    operation: '+',
    data1Label: 'Goles 1er tiempo', data1Unit: 'goles',
    data2Label: 'Goles 2do tiempo', data2Unit: 'goles',
    resultLabelTemplate: (res) => `El equipo marc√≥ ${res} goles en total.`,
    icon: '‚öΩ',
  },
  {
    id: 'pajaros_arbol_vuelan_lejos',
    problemTextTemplate: (n1, n2) => `Hab√≠a ${n1} p√°jaros en un √°rbol. Si ${n2} volaron lejos, ¬øcu√°ntos quedaron?`,
    operation: '-',
    data1Label: 'P√°jaros hab√≠a', data1Unit: 'p√°jaros',
    data2Label: 'P√°jaros volaron', data2Unit: 'p√°jaros',
    resultLabelTemplate: (res) => `Quedaron ${res} p√°jaros en el √°rbol.`,
    icon: 'üê¶',
  },
  {
    id: 'lapices_caja_azules_rojos',
    problemTextTemplate: (n1, n2) => `En una caja hay ${n1} l√°pices azules y ${n2} l√°pices rojos. ¬øCu√°ntos l√°pices hay en total?`,
    operation: '+',
    data1Label: 'L√°pices azules', data1Unit: 'l√°pices',
    data2Label: 'L√°pices rojos', data2Unit: 'l√°pices',
    resultLabelTemplate: (res) => `Hay ${res} l√°pices en total en la caja.`,
    icon: '‚úèÔ∏è',
  },
  {
    id: 'torta_porciones_comidas',
    problemTextTemplate: (n1, n2) => `Una torta ten√≠a ${n1} porciones. Se comieron ${n2} porciones. ¬øCu√°ntas porciones de torta quedan?`,
    operation: '-',
    data1Label: 'Porciones hab√≠a', data1Unit: 'porciones',
    data2Label: 'Porciones comidas', data2Unit: 'porciones',
    resultLabelTemplate: (res) => `Quedan ${res} porciones de torta.`,
    icon: 'üç∞',
  },
  {
    id: 'peces_acuario_dorados_payaso',
    problemTextTemplate: (n1, n2) => `Un acuario tiene ${n1} peces dorados y ${n2} peces payaso. ¬øCu√°ntos peces tiene en total?`,
    operation: '+',
    data1Label: 'Peces dorados', data1Unit: 'peces',
    data2Label: 'Peces payaso', data2Unit: 'peces',
    resultLabelTemplate: (res) => `El acuario tiene ${res} peces en total.`,
    icon: 'üê†',
  },
  {
    id: 'huevos_mama_compra_usa',
    problemTextTemplate: (n1, n2) => `Mam√° compr√≥ ${n1} huevos y us√≥ ${n2} para una receta. ¬øCu√°ntos huevos le quedan?`,
    operation: '-',
    data1Label: 'Huevos compr√≥', data1Unit: 'huevos',
    data2Label: 'Huevos us√≥', data2Unit: 'huevos',
    resultLabelTemplate: (res) => `A mam√° le quedan ${res} huevos.`,
    icon: 'ü•ö',
  },
  {
    id: 'figuritas_juan_animales_dinosaurios',
    problemTextTemplate: (n1, n2) => `Juan tiene ${n1} figuritas de animales y ${n2} de dinosaurios. ¬øCu√°ntas figuritas tiene en total?`,
    operation: '+',
    data1Label: 'Figuritas animales', data1Unit: 'figuritas',
    data2Label: 'Figuritas dinosaurios', data2Unit: 'figuritas',
    resultLabelTemplate: (res) => `Juan tiene ${res} figuritas en total.`,
    icon: 'ü¶ï',
  },
  {
    id: 'estacionamiento_lugares_libres',
    problemTextTemplate: (n1, n2) => `Un estacionamiento tiene capacidad para ${n1} autos. Si hay ${n2} autos estacionados, ¬øcu√°ntos lugares libres quedan?`,
    operation: '-',
    data1Label: 'Capacidad total', data1Unit: 'lugares',
    data2Label: 'Autos estacionados', data2Unit: 'autos',
    resultLabelTemplate: (res) => `Quedan ${res} lugares libres en el estacionamiento.`,
    icon: 'üÖøÔ∏è',
  },
  {
    id: 'globos_fiesta_azules_verdes',
    problemTextTemplate: (n1, n2) => `En una fiesta hay ${n1} globos azules y ${n2} globos verdes. ¬øCu√°ntos globos hay en total?`,
    operation: '+',
    data1Label: 'Globos azules', data1Unit: 'globos',
    data2Label: 'Globos verdes', data2Unit: 'globos',
    resultLabelTemplate: (res) => `Hay ${res} globos en total en la fiesta.`,
    icon: 'üéà',
  },
  {
    id: 'tren_pasajeros_bajan_estacion',
    problemTextTemplate: (n1, n2) => `Un tren ten√≠a ${n1} pasajeros. En una estaci√≥n bajaron ${n2}. ¬øCu√°ntos pasajeros contin√∫an en el tren?`,
    operation: '-',
    data1Label: 'Pasajeros hab√≠a', data1Unit: 'pasajeros',
    data2Label: 'Pasajeros bajaron', data2Unit: 'pasajeros',
    resultLabelTemplate: (res) => `Contin√∫an ${res} pasajeros en el tren.`,
    icon: 'üöÜ',
  },
  {
    id: 'medialunas_panadero_hornea',
    problemTextTemplate: (n1, n2) => `Un panadero horne√≥ ${n1} medialunas por la ma√±ana y ${n2} por la tarde. ¬øCu√°ntas medialunas horne√≥ en total?`,
    operation: '+',
    data1Label: 'Medialunas ma√±ana', data1Unit: 'medialunas',
    data2Label: 'Medialunas tarde', data2Unit: 'medialunas',
    resultLabelTemplate: (res) => `El panadero horne√≥ ${res} medialunas en total.`,
    icon: 'ü•ê',
  },
  {
    id: 'libros_aventuras_biblioteca_prestan',
    problemTextTemplate: (n1, n2) => `Una biblioteca ten√≠a ${n1} libros de aventuras. Prestaron ${n2}. ¬øCu√°ntos libros de aventuras quedan?`,
    operation: '-',
    data1Label: 'Libros hab√≠a', data1Unit: 'libros',
    data2Label: 'Libros prestaron', data2Unit: 'libros',
    resultLabelTemplate: (res) => `Quedan ${res} libros de aventuras en la biblioteca.`,
    icon: 'üìö',
  },
  {
    id: 'bolas_navidad_rojas_doradas',
    problemTextTemplate: (n1, n2) => `En un √°rbol de Navidad hay ${n1} bolas rojas y ${n2} bolas doradas. ¬øCu√°ntas bolas hay en total?`,
    operation: '+',
    data1Label: 'Bolas rojas', data1Unit: 'bolas',
    data2Label: 'Bolas doradas', data2Unit: 'bolas',
    resultLabelTemplate: (res) => `Hay ${res} bolas en total en el √°rbol.`,
    icon: 'üéÑ',
  },
  {
    id: 'rosas_florista_vende',
    problemTextTemplate: (n1, n2) => `Un florista ten√≠a ${n1} rosas. Vendi√≥ ${n2} rosas. ¬øCu√°ntas le quedan?`,
    operation: '-',
    data1Label: 'Rosas ten√≠a', data1Unit: 'rosas',
    data2Label: 'Rosas vendi√≥', data2Unit: 'rosas',
    resultLabelTemplate: (res) => `Al florista le quedan ${res} rosas.`,
    icon: 'üåπ',
  },
  {
    id: 'galletas_plato_chocolate_vainilla',
    problemTextTemplate: (n1, n2) => `En un plato hay ${n1} galletas de chocolate y ${n2} de vainilla. ¬øCu√°ntas galletas hay en total?`,
    operation: '+',
    data1Label: 'Galletas chocolate', data1Unit: 'galletas',
    data2Label: 'Galletas vainilla', data2Unit: 'galletas',
    resultLabelTemplate: (res) => `Hay ${res} galletas en total en el plato.`,
    icon: 'üç™',
  },
  {
    id: 'manzanas_arbol_caen',
    problemTextTemplate: (n1, n2) => `Un √°rbol ten√≠a ${n1} manzanas. Se cayeron ${n2} manzanas. ¬øCu√°ntas quedaron en el √°rbol?`,
    operation: '-',
    data1Label: 'Manzanas hab√≠a', data1Unit: 'manzanas',
    data2Label: 'Manzanas cayeron', data2Unit: 'manzanas',
    resultLabelTemplate: (res) => `Quedaron ${res} manzanas en el √°rbol.`,
    icon: 'üçé',
  },
  {
    id: 'figuritas_paquetes_total',
    problemTextTemplate: (n1, n2) => `Un paquete trae ${n1} figuritas y otro paquete trae ${n2} figuritas. ¬øCu√°ntas figuritas hay en total?`,
    operation: '+',
    data1Label: 'Figuritas paquete 1', data1Unit: 'figuritas',
    data2Label: 'Figuritas paquete 2', data2Unit: 'figuritas',
    resultLabelTemplate: (res) => `Hay ${res} figuritas en total.`,
    icon: '‚ú®',
  },
  {
    id: 'colectivo_asientos_libres',
    problemTextTemplate: (n1, n2) => `Un colectivo sali√≥ con ${n1} asientos. Si se ocuparon ${n2} asientos, ¬øcu√°ntos quedaron libres?`,
    operation: '-',
    data1Label: 'Asientos totales', data1Unit: 'asientos',
    data2Label: 'Asientos ocupados', data2Unit: 'asientos',
    resultLabelTemplate: (res) => `Quedaron ${res} asientos libres.`,
    icon: 'üöå',
  },
  {
    id: 'metros_laura_recorre',
    problemTextTemplate: (n1, n2) => `Laura corri√≥ ${n1} metros y luego camin√≥ ${n2} metros m√°s. ¬øCu√°ntos metros recorri√≥ en total?`,
    operation: '+',
    data1Label: 'Metros corri√≥', data1Unit: 'metros',
    data2Label: 'Metros camin√≥', data2Unit: 'metros',
    resultLabelTemplate: (res) => `Laura recorri√≥ ${res} metros en total.`,
    icon: 'üèÉ‚Äç‚ôÄÔ∏è',
  },
  {
    id: 'agua_bidon_riego',
    problemTextTemplate: (n1, n2) => `Un bid√≥n ten√≠a ${n1} litros de agua. Se usaron ${n2} litros para regar. ¬øCu√°ntos litros quedan?`,
    operation: '-',
    data1Label: 'Litros hab√≠a', data1Unit: 'litros',
    data2Label: 'Litros usados', data2Unit: 'litros',
    resultLabelTemplate: (res) => `Quedan ${res} litros en el bid√≥n.`,
    icon: 'üíß',
  },
  {
    id: 'pollitos_granja_amarillos_marrones',
    problemTextTemplate: (n1, n2) => `En una granja hay ${n1} pollitos amarillos y ${n2} pollitos marrones. ¬øCu√°ntos pollitos hay en total?`,
    operation: '+',
    data1Label: 'Pollitos amarillos', data1Unit: 'pollitos',
    data2Label: 'Pollitos marrones', data2Unit: 'pollitos',
    resultLabelTemplate: (res) => `Hay ${res} pollitos en total en la granja.`,
    icon: 'üê§',
  },
  {
    id: 'juguetes_habitacion_junta',
    problemTextTemplate: (n1, n2) => `En tu habitaci√≥n tienes ${n1} autitos y ${n2} mu√±ecos. ¬øCu√°ntos juguetes tienes en total?`,
    operation: '+',
    data1Label: 'Autitos', data1Unit: 'juguetes',
    data2Label: 'Mu√±ecos', data2Unit: 'juguetes',
    resultLabelTemplate: (res) => `Tienes ${res} juguetes en total.`,
    icon: 'üöó',
  },
  {
    id: 'bolitas_pierde_jardin',
    problemTextTemplate: (n1, n2) => `Ten√≠as ${n1} bolitas y perdiste ${n2} jugando en el jard√≠n. ¬øCu√°ntas bolitas te quedan?`,
    operation: '-',
    data1Label: 'Bolitas ten√≠as', data1Unit: 'bolitas',
    data2Label: 'Bolitas perdiste', data2Unit: 'bolitas',
    resultLabelTemplate: (res) => `Te quedan ${res} bolitas.`,
    icon: 'üîµ',
  },
  {
    id: 'cuentos_estante_compran',
    problemTextTemplate: (n1, n2) => `Hab√≠a ${n1} cuentos en el estante. Mam√° compr√≥ ${n2} cuentos nuevos. ¬øCu√°ntos cuentos hay ahora?`,
    operation: '+',
    data1Label: 'Cuentos hab√≠a', data1Unit: 'cuentos',
    data2Label: 'Cuentos nuevos', data2Unit: 'cuentos',
    resultLabelTemplate: (res) => `Ahora hay ${res} cuentos en el estante.`,
    icon: 'üìö',
  },
  {
    id: 'cartas_mazo_reparten',
    problemTextTemplate: (n1, n2) => `Un mazo ten√≠a ${n1} cartas. Para jugar se repartieron ${n2} cartas. ¬øCu√°ntas cartas quedaron en el mazo?`,
    operation: '-',
    data1Label: 'Cartas hab√≠a', data1Unit: 'cartas',
    data2Label: 'Cartas repartidas', data2Unit: 'cartas',
    resultLabelTemplate: (res) => `Quedaron ${res} cartas en el mazo.`,
    icon: '‚ô†Ô∏è',
  },
  {
    id: 'mariposas_vuelan_juntas',
    problemTextTemplate: (n1, n2) => `En una flor hab√≠a ${n1} mariposas. Llegaron ${n2} mariposas m√°s. ¬øCu√°ntas mariposas hay ahora?`,
    operation: '+',
    data1Label: 'Mariposas hab√≠a', data1Unit: 'mariposas',
    data2Label: 'Mariposas llegaron', data2Unit: 'mariposas',
    resultLabelTemplate: (res) => `Ahora hay ${res} mariposas en la flor.`,
    icon: 'ü¶ã',
  },
  {
    id: 'dinosaurios_museo_prestan',
    problemTextTemplate: (n1, n2) => `El museo ten√≠a ${n1} esqueletos de dinosaurios. Prestaron ${n2} a otra ciudad. ¬øCu√°ntos quedaron?`,
    operation: '-',
    data1Label: 'Esqueletos ten√≠a', data1Unit: 'esqueletos',
    data2Label: 'Esqueletos prestaron', data2Unit: 'esqueletos',
    resultLabelTemplate: (res) => `Quedaron ${res} esqueletos en el museo.`,
    icon: 'ü¶¥',
  },
  {
    id: 'helados_venden_kiosco',
    problemTextTemplate: (n1, n2) => `Un kiosco vendi√≥ ${n1} helados de frutilla y ${n2} helados de chocolate. ¬øCu√°ntos helados vendi√≥ en total?`,
    operation: '+',
    data1Label: 'Helados frutilla', data1Unit: 'helados',
    data2Label: 'Helados chocolate', data2Unit: 'helados',
    resultLabelTemplate: (res) => `El kiosco vendi√≥ ${res} helados en total.`,
    icon: 'üç¶',
  },
  {
    id: 'facturas_panaderia_comen',
    problemTextTemplate: (n1, n2) => `En la panader√≠a hab√≠a ${n1} facturas. Los clientes compraron ${n2}. ¬øCu√°ntas facturas quedaron?`,
    operation: '-',
    data1Label: 'Facturas hab√≠a', data1Unit: 'facturas',
    data2Label: 'Facturas compraron', data2Unit: 'facturas',
    resultLabelTemplate: (res) => `Quedaron ${res} facturas.`,
    icon: 'ü•ê',
  },
  {
    id: 'amigos_fiesta_llegan',
    problemTextTemplate: (n1, n2) => `Ya hab√≠a ${n1} amigos en la fiesta. Luego llegaron ${n2} amigos m√°s. ¬øCu√°ntos amigos hay en total?`,
    operation: '+',
    data1Label: 'Amigos hab√≠a', data1Unit: 'amigos',
    data2Label: 'Amigos llegaron', data2Unit: 'amigos',
    resultLabelTemplate: (res) => `Hay ${res} amigos en total en la fiesta.`,
    icon: 'üéâ',
  },
  {
    id: 'invitados_retiran_temprano',
    problemTextTemplate: (n1, n2) => `A la fiesta llegaron ${n1} invitados. Si ${n2} se retiraron temprano, ¬øcu√°ntos invitados quedaron?`,
    operation: '-',
    data1Label: 'Invitados llegaron', data1Unit: 'invitados',
    data2Label: 'Invitados retiraron', data2Unit: 'invitados',
    resultLabelTemplate: (res) => `Quedaron ${res} invitados en la fiesta.`,
    icon: 'ü•≥',
  },
  {
    id: 'tomates_huerta_cosechan',
    problemTextTemplate: (n1, n2) => `Se cosecharon ${n1} tomates rojos y ${n2} tomates verdes de la huerta. ¬øCu√°ntos tomates se cosecharon?`,
    operation: '+',
    data1Label: 'Tomates rojos', data1Unit: 'tomates',
    data2Label: 'Tomates verdes', data2Unit: 'tomates',
    resultLabelTemplate: (res) => `Se cosecharon ${res} tomates en total.`,
    icon: 'üçÖ',
  },
  {
    id: 'zanahorias_conejo_come',
    problemTextTemplate: (n1, n2) => `Un conejo ten√≠a ${n1} zanahorias. Se comi√≥ ${n2}. ¬øCu√°ntas zanahorias le quedan?`,
    operation: '-',
    data1Label: 'Zanahorias ten√≠a', data1Unit: 'zanahorias',
    data2Label: 'Zanahorias comi√≥', data2Unit: 'zanahorias',
    resultLabelTemplate: (res) => `Al conejo le quedan ${res} zanahorias.`,
    icon: 'ü•ï',
  },
  {
    id: 'estudiantes_biblioteca_entran',
    problemTextTemplate: (n1, n2) => `En la biblioteca hab√≠a ${n1} estudiantes leyendo. Entraron ${n2} estudiantes m√°s. ¬øCu√°ntos hay ahora?`,
    operation: '+',
    data1Label: 'Estudiantes hab√≠a', data1Unit: 'estudiantes',
    data2Label: 'Estudiantes entraron', data2Unit: 'estudiantes',
    resultLabelTemplate: (res) => `Ahora hay ${res} estudiantes en la biblioteca.`,
    icon: 'üßë‚Äçüéì',
  },
  {
    id: 'sillas_comedor_ocupan',
    problemTextTemplate: (n1, n2) => `Un comedor tiene ${n1} sillas. Si se ocuparon ${n2} sillas, ¬øcu√°ntas quedaron libres?`,
    operation: '-',
    data1Label: 'Sillas total', data1Unit: 'sillas',
    data2Label: 'Sillas ocupadas', data2Unit: 'sillas',
    resultLabelTemplate: (res) => `Quedaron ${res} sillas libres.`,
    icon: 'üçΩÔ∏è',
  },
  {
    id: 'collares_hace_vende',
    problemTextTemplate: (n1, n2) => `Ana hizo ${n1} collares. Si vendi√≥ ${n2} collares en la feria, ¬øcu√°ntos le quedan?`,
    operation: '-',
    data1Label: 'Collares hizo', data1Unit: 'collares',
    data2Label: 'Collares vendi√≥', data2Unit: 'collares',
    resultLabelTemplate: (res) => `A Ana le quedan ${res} collares.`,
    icon: 'üíé',
  },
  {
    id: 'pelotas_cancha_traen',
    problemTextTemplate: (n1, n2) => `Para jugar hab√≠a ${n1} pelotas. El profesor trajo ${n2} pelotas m√°s. ¬øCu√°ntas pelotas hay ahora?`,
    operation: '+',
    data1Label: 'Pelotas hab√≠a', data1Unit: 'pelotas',
    data2Label: 'Pelotas trajo', data2Unit: 'pelotas',
    resultLabelTemplate: (res) => `Ahora hay ${res} pelotas para jugar.`,
    icon: 'üèÄ',
  },
  {
    id: 'vasos_agua_dia',
    problemTextTemplate: (n1, n2) => `Tom√© ${n1} vasos de agua por la ma√±ana y ${n2} por la tarde. ¬øCu√°ntos vasos de agua tom√© en el d√≠a?`,
    operation: '+',
    data1Label: 'Vasos ma√±ana', data1Unit: 'vasos',
    data2Label: 'Vasos tarde', data2Unit: 'vasos',
    resultLabelTemplate: (res) => `Tom√© ${res} vasos de agua en el d√≠a.`,
    icon: 'üíß',
  },
  {
    id: 'mensajes_celular_borra',
    problemTextTemplate: (n1, n2) => `Ten√≠as ${n1} mensajes en tu celular. Borraste ${n2} mensajes viejos. ¬øCu√°ntos mensajes te quedan?`,
    operation: '-',
    data1Label: 'Mensajes ten√≠as', data1Unit: 'mensajes',
    data2Label: 'Mensajes borraste', data2Unit: 'mensajes',
    resultLabelTemplate: (res) => `Te quedan ${res} mensajes en el celular.`,
    icon: 'üì±',
  },
  {
    id: 'fotos_camara_saca',
    problemTextTemplate: (n1, n2) => `Con mi c√°mara saqu√© ${n1} fotos del paisaje y ${n2} fotos de animales. ¬øCu√°ntas fotos saqu√© en total?`,
    operation: '+',
    data1Label: 'Fotos paisaje', data1Unit: 'fotos',
    data2Label: 'Fotos animales', data2Unit: 'fotos',
    resultLabelTemplate: (res) => `Saqu√© ${res} fotos en total.`,
    icon: 'üèûÔ∏è',
  },
  {
    id: 'abejas_panal_salen',
    problemTextTemplate: (n1, n2) => `En un panal hab√≠a ${n1} abejas. Salieron ${n2} abejas a buscar polen. ¬øCu√°ntas quedaron en el panal?`,
    operation: '-',
    data1Label: 'Abejas hab√≠a', data1Unit: 'abejas',
    data2Label: 'Abejas salieron', data2Unit: 'abejas',
    resultLabelTemplate: (res) => `Quedaron ${res} abejas en el panal.`,
    icon: 'üêù',
  },
  {
    id: 'barriletes_cielo_vuelan',
    problemTextTemplate: (n1, n2) => `En el cielo volaban ${n1} barriletes rojos. Se sumaron ${n2} barriletes azules. ¬øCu√°ntos barriletes vuelan ahora?`,
    operation: '+',
    data1Label: 'Barriletes rojos', data1Unit: 'barriletes',
    data2Label: 'Barriletes azules', data2Unit: 'barriletes',
    resultLabelTemplate: (res) => `Ahora vuelan ${res} barriletes.`,
    icon: 'ü™Å',
  },
  {
    id: 'hojas_arbol_caen_otono',
    problemTextTemplate: (n1, n2) => `Un √°rbol ten√≠a ${n1} hojas. En oto√±o se cayeron ${n2} hojas. ¬øCu√°ntas hojas le quedaron aproximadamente?`,
    operation: '-',
    data1Label: 'Hojas ten√≠a', data1Unit: 'hojas',
    data2Label: 'Hojas cayeron', data2Unit: 'hojas',
    resultLabelTemplate: (res) => `Al √°rbol le quedaron ${res} hojas aproximadamente.`,
    icon: 'üçÇ',
  },
  {
    id: 'km_viaje_familia',
    problemTextTemplate: (n1, n2) => `Una familia viaj√≥ ${n1} km el primer d√≠a y ${n2} km el segundo d√≠a. ¬øCu√°ntos km viaj√≥ en total?`,
    operation: '+',
    data1Label: 'Km d√≠a 1', data1Unit: 'km',
    data2Label: 'Km d√≠a 2', data2Unit: 'km',
    resultLabelTemplate: (res) => `La familia viaj√≥ ${res} km en total.`,
    icon: 'üó∫Ô∏è',
  },
  {
    id: 'dinero_ahorrado_gasta_libro',
    problemTextTemplate: (n1, n2) => `Ten√≠as ${n1} pesos ahorrados. Gastaste ${n2} pesos en un libro. ¬øCu√°nto dinero te queda?`,
    operation: '-',
    data1Label: 'Dinero ahorrado', data1Unit: 'pesos',
    data2Label: 'Dinero gastado', data2Unit: 'pesos',
    resultLabelTemplate: (res) => `Te quedan ${res} pesos.`,
    icon: 'üí∏',
  },
  {
    id: 'manzanas_cosecha_vende',
    problemTextTemplate: (n1, n2) => `Se cosecharon ${n1} manzanas. Si se vendieron ${n2} manzanas, ¬øcu√°ntas quedaron sin vender?`,
    operation: '-',
    data1Label: 'Manzanas cosechadas', data1Unit: 'manzanas',
    data2Label: 'Manzanas vendidas', data2Unit: 'manzanas',
    resultLabelTemplate: (res) => `Quedaron ${res} manzanas sin vender.`,
    icon: 'üçè',
  },
];


const technologyScenarios: Scenario[] = [
  {
    id: 'archivos_descargados',
    problemTextTemplate: (n1, n2) => `Descargaste ${n1} canciones y ${n2} videos. ¬øCu√°ntos archivos descargaste en total?`,
    operation: '+',
    data1Label: 'Canciones', data1Unit: 'archivos',
    data2Label: 'Videos', data2Unit: 'archivos',
    resultLabelTemplate: (res) => `Descargaste ${res} archivos en total.`,
    icon: 'üíª',
  },
  {
    id: 'bateria_celular',
    problemTextTemplate: (n1, n2) => `Tu celular ten√≠a ${n1}% de bater√≠a y gastaste ${n2}% jugando. ¬øCu√°nta bater√≠a le queda?`,
    operation: '-',
    data1Label: 'Bater√≠a inicial', data1Unit: '%',
    data2Label: 'Bater√≠a gastada', data2Unit: '%',
    resultLabelTemplate: (res) => `Le queda ${res}% de bater√≠a.`,
    icon: 'üîã',
  },
  {
    id: 'fotos_tomadas_borradas',
    problemTextTemplate: (n1, n2) => `Tomaste ${n1} fotos con tu tablet. Luego borraste ${n2} que no te gustaron. ¬øCu√°ntas fotos te quedaron?`,
    operation: '-',
    data1Label: 'Fotos tomadas', data1Unit: 'fotos',
    data2Label: 'Fotos borradas', data2Unit: 'fotos',
    resultLabelTemplate: (res) => `Te quedaron ${res} fotos.`,
    icon: 'üì∏',
  },
  {
    id: 'mensajes_recibidos_enviados',
    problemTextTemplate: (n1, n2) => `Recibiste ${n1} mensajes de WhatsApp y enviaste ${n2}. ¬øCu√°ntos mensajes intercambiaste en total?`,
    operation: '+',
    data1Label: 'Mensajes recibidos', data1Unit: 'mensajes',
    data2Label: 'Mensajes enviados', data2Unit: 'mensajes',
    resultLabelTemplate: (res) => `Intercambiaste ${res} mensajes en total.`,
    icon: 'üí¨',
  },
];

const houseScenarios: Scenario[] = [
  {
    id: 'platos_lavar_fregar',
    problemTextTemplate: (n1, n2) => `Hab√≠a ${n1} platos sucios en la pileta. Mam√° lav√≥ ${n2} platos. ¬øCu√°ntos platos sucios quedan?`,
    operation: '-',
    data1Label: 'Platos sucios', data1Unit: 'platos',
    data2Label: 'Platos lavados', data2Unit: 'platos',
    resultLabelTemplate: (res) => `Quedan ${res} platos sucios.`,
    icon: 'üçΩÔ∏è',
  },
  {
    id: 'juguetes_ordenar_guardar',
    problemTextTemplate: (n1, n2) => `Hab√≠a ${n1} juguetes desparramados. Guardaste ${n2} en la caja. ¬øCu√°ntos juguetes m√°s necesitas guardar?`,
    operation: '-',
    data1Label: 'Juguetes desparramados', data1Unit: 'juguetes',
    data2Label: 'Juguetes guardados', data2Unit: 'juguetes',
    resultLabelTemplate: (res) => `Necesitas guardar ${res} juguetes m√°s.`,
    icon: 'üß∏',
  },
  {
    id: 'libros_estanteria_colocar',
    problemTextTemplate: (n1, n2) => `Tienes ${n1} libros en tu escritorio y ${n2} libros en una pila. ¬øCu√°ntos libros tienes que colocar en la estanter√≠a en total?`,
    operation: '+',
    data1Label: 'Libros escritorio', data1Unit: 'libros',
    data2Label: 'Libros pila', data2Unit: 'libros',
    resultLabelTemplate: (res) => `Tienes que colocar ${res} libros en total.`,
    icon: 'üìö',
  },
  {
    id: 'ropa_lavar_secada',
    problemTextTemplate: (n1, n2) => `Pusiste ${n1} prendas de ropa a lavar. Ya se secaron ${n2} prendas. ¬øCu√°ntas prendas faltan por secarse?`,
    operation: '-',
    data1Label: 'Prendas a lavar', data1Unit: 'prendas',
    data2Label: 'Prendas secas', data2Unit: 'prendas',
    resultLabelTemplate: (res) => `Faltan ${res} prendas por secarse.`,
    icon: 'üß∫',
  },
];

const transportScenarios: Scenario[] = [
  {
    id: 'kilometros_viaje_auto',
    problemTextTemplate: (n1, n2) => `Un auto recorri√≥ ${n1} kil√≥metros por la ma√±ana y ${n2} kil√≥metros por la tarde. ¬øCu√°ntos kil√≥metros recorri√≥ en total?`,
    operation: '+',
    data1Label: 'Km ma√±ana', data1Unit: 'km',
    data2Label: 'Km tarde', data2Unit: 'km',
    resultLabelTemplate: (res) => `El auto recorri√≥ ${res} km en total.`,
    icon: 'üöó',
  },
  {
    id: 'pasajeros_avion_destino',
    problemTextTemplate: (n1, n2) => `Un avi√≥n despeg√≥ con ${n1} pasajeros. En la primera escala bajaron ${n2} pasajeros. ¬øCu√°ntos pasajeros siguieron viaje?`,
    operation: '-',
    data1Label: 'Pasajeros al despegar', data1Unit: 'pasajeros',
    data2Label: 'Pasajeros bajaron', data2Unit: 'pasajeros',
    resultLabelTemplate: (res) => `Siguieron viaje ${res} pasajeros.`,
    icon: '‚úàÔ∏è',
  },
  {
    id: 'bicicletas_parque_suman',
    problemTextTemplate: (n1, n2) => `Hab√≠a ${n1} bicicletas en el bicicletero del parque. Llegaron ${n2} ciclistas m√°s. ¬øCu√°ntas bicicletas hay ahora?`,
    operation: '+',
    data1Label: 'Bicicletas hab√≠a', data1Unit: 'bicicletas',
    data2Label: 'Bicicletas llegaron', data2Unit: 'bicicletas',
    resultLabelTemplate: (res) => `Ahora hay ${res} bicicletas.`,
    icon: 'üö≤',
  },
  {
    id: 'barcos_puerto_zarpan',
    problemTextTemplate: (n1, n2) => `En el puerto hab√≠a ${n1} barcos amarrados. Zarparon ${n2} barcos. ¬øCu√°ntos barcos quedaron en el puerto?`,
    operation: '-',
    data1Label: 'Barcos hab√≠a', data1Unit: 'barcos',
    data2Label: 'Barcos zarparon', data2Unit: 'barcos',
    resultLabelTemplate: (res) => `Quedaron ${res} barcos en el puerto.`,
    icon: 'üö¢',
  },
];

const videogameScenarios: Scenario[] = [
  {
    id: 'monedas_recolectadas_juego',
    problemTextTemplate: (n1, n2) => `En un nivel de tu juego favorito recolectaste ${n1} monedas de oro y ${n2} monedas de plata. ¬øCu√°ntas monedas recolectaste en total?`,
    operation: '+',
    data1Label: 'Monedas de oro', data1Unit: 'monedas',
    data2Label: 'Monedas de plata', data2Unit: 'monedas',
    resultLabelTemplate: (res) => `Recolectaste ${res} monedas en total.`,
    icon: 'ü™ô',
  },
  {
    id: 'vidas_perdidas_juego',
    problemTextTemplate: (n1, n2) => `Empezaste el juego con ${n1} vidas. Perdiste ${n2} vidas al caer en una trampa. ¬øCu√°ntas vidas te quedan?`,
    operation: '-',
    data1Label: 'Vidas iniciales', data1Unit: 'vidas',
    data2Label: 'Vidas perdidas', data2Unit: 'vidas',
    resultLabelTemplate: (res) => `Te quedan ${res} vidas.`,
    icon: '‚ù§Ô∏è',
  },
  {
    id: 'puntos_experiencia_ganados',
    problemTextTemplate: (n1, n2) => `Ganaste ${n1} puntos de experiencia por completar una misi√≥n y ${n2} puntos por derrotar a un enemigo. ¬øCu√°ntos puntos de experiencia ganaste en total?`,
    operation: '+',
    data1Label: 'Puntos misi√≥n', data1Unit: 'puntos',
    data2Label: 'Puntos enemigo', data2Unit: 'puntos',
    resultLabelTemplate: (res) => `Ganaste ${res} puntos de experiencia en total.`,
    icon: 'üåü',
  },
  {
    id: 'pociones_usadas_juego',
    problemTextTemplate: (n1, n2) => `Ten√≠as ${n1} pociones de curaci√≥n en tu inventario. Usaste ${n2} pociones despu√©s de una batalla. ¬øCu√°ntas pociones te quedan?`,
    operation: '-',
    data1Label: 'Pociones ten√≠as', data1Unit: 'pociones',
    data2Label: 'Pociones usadas', data2Unit: 'pociones',
    resultLabelTemplate: (res) => `Te quedan ${res} pociones.`,
    icon: 'üß™',
  },
];

const foodScenarios: Scenario[] = [
  {
    id: 'frutas_ensalada',
    problemTextTemplate: (n1, n2) => `Para una ensalada de frutas, usaste ${n1} manzanas y ${n2} bananas. ¬øCu√°ntas frutas usaste en total?`,
    operation: '+',
    data1Label: 'Manzanas', data1Unit: 'frutas',
    data2Label: 'Bananas', data2Unit: 'frutas',
    resultLabelTemplate: (res) => `Usaste ${res} frutas en total.`,
    icon: 'ü•ó',
  },
  {
    id: 'empanadas_comidas_cena',
    problemTextTemplate: (n1, n2) => `Hab√≠a ${n1} empanadas para la cena. Entre todos comieron ${n2} empanadas. ¬øCu√°ntas empanadas sobraron?`,
    operation: '-',
    data1Label: 'Empanadas hab√≠a', data1Unit: 'empanadas',
    data2Label: 'Empanadas comidas', data2Unit: 'empanadas',
    resultLabelTemplate: (res) => `Sobraron ${res} empanadas.`,
    icon: 'ü•ü',
  },
  {
    id: 'chocolates_caja_regalo',
    problemTextTemplate: (n1, n2) => `Una caja de chocolates tiene ${n1} chocolates con leche y ${n2} chocolates amargos. ¬øCu√°ntos chocolates hay en la caja?`,
    operation: '+',
    data1Label: 'Chocolates con leche', data1Unit: 'chocolates',
    data2Label: 'Chocolates amargos', data2Unit: 'chocolates',
    resultLabelTemplate: (res) => `Hay ${res} chocolates en la caja.`,
    icon: 'üç´',
  },
  {
    id: 'pizzas_porciones_restantes',
    problemTextTemplate: (n1, n2) => `Una pizza grande ten√≠a ${n1} porciones. Te comiste ${n2} porciones. ¬øCu√°ntas porciones de pizza quedan?`,
    operation: '-',
    data1Label: 'Porciones hab√≠a', data1Unit: 'porciones',
    data2Label: 'Porciones comidas', data2Unit: 'porciones',
    resultLabelTemplate: (res) => `Quedan ${res} porciones de pizza.`,
    icon: 'üçï',
  },
];

const mixedOperationsAdvancedScenarios: Scenario[] = [
  {
    id: 'cajas_lapices',
    problemTextTemplate: (n1, n2) => `Hay ${n1} cajas con ${n2} l√°pices cada una. ¬øCu√°ntos l√°pices hay en total?`,
    operation: '*',
    data1Label: 'Cajas', data1Unit: 'cajas',
    data2Label: 'L√°pices por caja', data2Unit: 'l√°pices',
    resultLabelTemplate: (res) => `Hay ${res} l√°pices en total.`,
    icon: '‚úèÔ∏è',
  },
  {
    id: 'flores_floreros',
    problemTextTemplate: (n1, n2) => `Si tienes ${n1} flores y quieres poner ${n2} flores en cada florero, ¬øcu√°ntos floreros necesitar√°s?`,
    operation: '/',
    data1Label: 'Total flores', data1Unit: 'flores',
    data2Label: 'Flores por florero', data2Unit: 'flores',
    resultLabelTemplate: (res) => `Necesitar√°s ${res} floreros.`,
    icon: 'üíê',
  },
  {
    id: 'paquetes_galletas_total',
    problemTextTemplate: (n1, n2) => `Compraste ${n1} paquetes de galletas, y cada paquete trae ${n2} galletas. ¬øCu√°ntas galletas compraste en total?`,
    operation: '*',
    data1Label: 'Paquetes', data1Unit: 'paquetes',
    data2Label: 'Galletas por paquete', data2Unit: 'galletas',
    resultLabelTemplate: (res) => `Compraste ${res} galletas en total.`,
    icon: 'üç™',
  },
  {
    id: 'caramelos_repartir_ni√±os',
    problemTextTemplate: (n1, n2) => `Tienes ${n1} caramelos y los quieres repartir en partes iguales entre ${n2} ni√±os. ¬øCu√°ntos caramelos le tocar√°n a cada ni√±o?`,
    operation: '/',
    data1Label: 'Total caramelos', data1Unit: 'caramelos',
    data2Label: 'Ni√±os', data2Unit: 'ni√±os',
    resultLabelTemplate: (res) => `A cada ni√±o le tocar√°n ${res} caramelos.`,
    icon: 'üç¨',
  },
];

export const scenarioCollections = {
  [ScenarioSetId.GENERAL]: generalScenarios,
  [ScenarioSetId.TECHNOLOGY]: technologyScenarios,
  [ScenarioSetId.HOUSE]: houseScenarios,
  [ScenarioSetId.TRANSPORT]: transportScenarios,
  [ScenarioSetId.VIDEOGAMES]: videogameScenarios,
  [ScenarioSetId.FOOD]: foodScenarios,
  [ScenarioSetId.MIXED_OPERATIONS_ADVANCED]: mixedOperationsAdvancedScenarios,
  [ScenarioSetId.FIRST_GRADE_ADD_SUB_EASY]: firstGradeEasyAddSubScenarios, // New
  [ScenarioSetId.FIRST_GRADE_ADD_SUB_LT100_SIMPLE]: firstGradeTensSimpleTwoDigitScenarios, // New
};

// Function to generate numbers for a problem based on range and operation
export const generateProblemNumbers = (range: [number, number], operation: '+' | '-' | '*' | '/'): { num1: number, num2: number } => {
  let num1 = getRandomInt(range[0], range[1]);
  let num2 = getRandomInt(range[0], range[1]);

  if (operation === '-') {
    if (num1 < num2) { // Ensure num1 is greater or equal for subtraction
      [num1, num2] = [num2, num1];
    }
  } else if (operation === '/') {
    const minDivisor = Math.max(1, range[0] === 0 && range[1] >=1 ? 1 : range[0]); // Ensure divisor is at least 1 if range allows 0
    num2 = getRandomInt(minDivisor, range[1]);
    if (num2 === 0) num2 = 1; // Absolute fallback for divisor

    // Determine a suitable quotient range
    // Max quotient such that quotient * num2 <= range[1]
    const maxQuotient = Math.floor(range[1] / num2);
    // Min quotient such that quotient * num2 >= range[0]
    // If range[0] is 0, quotient can be 0. Otherwise, quotient should be at least 1.
    let minQuotient = (range[0] === 0 && num2 !== 0) ? 0 : Math.ceil(range[0] / num2);
    
    // Ensure quotient is at least 1 if maxQuotient allows, unless dividend must be 0
    if (maxQuotient > 0) {
      minQuotient = Math.max(1, minQuotient);
    } else if (range[0] > 0 && maxQuotient === 0) { 
      // This case means num2 is too large for the range to have a quotient >= 1
      // that results in a dividend within range.
      // Fallback: try to make quotient 1 if possible, or handle as an edge case.
      // Forcing num1 = num2 if num2 is in range.
      if (num2 >= range[0] && num2 <= range[1]) {
          num1 = num2; // quotient = 1
          return { num1, num2 };
      } else {
          // Fallback to a simpler division or re-generate num2 with tighter constraints
          // For now, let's try to make a simple division if the range is very restrictive
          num1 = num2; // This might be out of range, but it's a fallback.
          return { num1, num2 };
      }
    } else if (maxQuotient === 0 && minQuotient === 0) { // Only possible if range[0] is 0
        // num1 will be 0
    }


    if (maxQuotient < minQuotient) {
      // If still no valid quotient range (e.g. range [1,5], num2 = 6 -> maxQ=0, minQ_sys=1 -> minQ=1)
      // This indicates a difficult pairing. Fallback to num1 = num2 for quotient 1 if num2 is in range.
      if (num2 >= range[0] && num2 <= range[1]) {
        num1 = num2;
      } else if (range[0] === 0) {
        num1 = 0; // If num2 is out of range but 0 is allowed
      } else {
        // Last resort: make num1 a multiple of num2 that's close to range[0] or just num2
        num1 = Math.max(range[0], num2); 
        num1 = Math.ceil(num1 / num2) * num2; 
        if (num1 > range[1]) num1 = num2; // if still too big, just use num2
      }
    } else {
      const quotient = getRandomInt(minQuotient, maxQuotient);
      num1 = quotient * num2;
    }
  } else if (operation === '*') {
     // For multiplication, ensure operands are not excessively large if range is wide,
     // to keep product manageable for the grade level.
     // Example: if range is [0, 999], and we want product not to exceed ~10000 for 3rd grade
     if (range[1] > 100) { // If dealing with potentially large numbers
         if (num1 * num2 > 20000 && num1 > 10 && num2 > 10) { // Heuristic: if product is too big
            // Try to reduce one of the operands
            if (num1 > num2) {
                num1 = getRandomInt(Math.max(1, range[0]), Math.min(range[1], Math.floor(20000 / Math.max(1,num2)), 100));
            } else {
                num2 = getRandomInt(Math.max(1, range[0]), Math.min(range[1], Math.floor(20000 / Math.max(1,num1)), 100));
            }
         }
     }
  }
  return { num1, num2 };
};
